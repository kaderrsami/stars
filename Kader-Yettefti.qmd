---
title: "Kader-Yettefti Stars subject 11"
author: "Sami Kader-Yettefti"
format: html
---
## Main data set import
```{r setup, include= FALSE}
here::i_am("stars.Rproj")
library(here)
library(vroom)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
theme_bw()
```

Link to the [GitHub repository](https://github.com/kaderrsami/stars).

### Question 3

```{r}
# Changing the loading process to handle missing values and decimal mark
planets <- vroom(
  here("data", "List%planets.csv"),
  na = "na",
  delim = ":",
  col_types = cols(
    p_name = col_character(),
    mass = col_double(),
    DENSITY = col_double(),
    `Radius (Earth)` = col_double(),
    `TERRAIN TYPE` = col_character(),
    Type_climate = col_character(),
    planet_code = col_double(),
    Star_idx = col_double()
  ),
  locale = locale(decimal_mark = ",")
)

# Check the structure of the loaded data
str(planets)
```

```{r}
# Expected values
expected_row_count <- 1191
expected_column_count <- 8

# Check the number of rows and columns
actual_row_count <- nrow(planets)
actual_column_count <- ncol(planets)

# Check if numerical variables are recognized correctly
numerical_variables <- c("mass", "Radius (Earth)", "DENSITY", "planet_code", "Star_idx")
are_numerical <- sapply(planets[numerical_variables], is.numeric)

# Conditional checks and messages
if (actual_row_count == expected_row_count && actual_column_count == expected_column_count) {
  message("Data loaded successfully w/ the correct number of rows and columns.")
} else {
  message(
    "Data loading issue: Expected rows: ", expected_row_count,
    ", Actual rows: ", actual_row_count,
    "; Expected columns: ", expected_column_count,
    ", Actual columns: ", actual_column_count
  )
}

if (all(are_numerical)) {
  message("All numerical variables are correctly recognized as numerical.")
} else {
  message("Some numerical variables are not recognized correctly.")
}
```

### Question 4

```{r}
# Number of observations (planets) and variables
num_observations <- nrow(planets)
num_variables <- ncol(planets)

# Number of missing values for each variable
missing_values <- sapply(planets, function(x) sum(is.na(x)))

# Number of observations with at least one missing value
num_obs_with_missing <- sum(apply(planets, 1, function(x) any(is.na(x))))

# Create a data frame for the table
table_data <- data.frame(
  Metric = c(
    "Number of Observations", "Number of Variables",
    paste("Missing Values in '", names(missing_values), "'", sep = ""),
    "Observations with at Least One Missing Value"
  ),
  Value = c(num_observations, num_variables, missing_values, num_obs_with_missing)
)

# Create the table using kable
kable(table_data, format = "markdown", col.names = c("Metric", "Value"))
```

### Question 5

```{r}
# Filter out rows with missing values in Density or Radius
planets_complete <- planets %>%
  filter(!is.na(DENSITY) & !is.na(`Radius (Earth)`))

# Plotting the data
ggplot(planets_complete, aes(x = DENSITY, y = `Radius (Earth)`)) +
  geom_point() +
  labs(
    title = "Planet Radius as a Function of Density",
    x = "Density (relative to Earth)",
    y = "Radius (relative to Earth)"
  )
```

### Question 6

```{r}
# Function to get the planet with max and min value for a given variable
get_extremes <- function(df, variable) {
  max_row <- df %>%
    filter(.[[variable]] == max(.[[variable]], na.rm = TRUE)) %>%
    select(p_name, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Max")

  min_row <- df %>%
    filter(.[[variable]] == min(.[[variable]], na.rm = TRUE)) %>%
    select(p_name, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Min")

  rbind(max_row, min_row)
}

# Apply the function to each numerical variable
extremes_mass <- get_extremes(planets, "mass")
extremes_density <- get_extremes(planets, "DENSITY")
extremes_radius <- get_extremes(planets, "Radius (Earth)")

# Combine the results into a single table
extreme_planets <- rbind(extremes_mass, extremes_density, extremes_radius)

# Create the table using kable
kable(extreme_planets, format = "markdown", col.names = c("Planet Name", "Value", "Variable", "Extremity"))
```

## Improved data representation

### Question 7

```{r}
# Split the TERRAIN TYPE
terrain_types <- planets %>%
  select(planet_code, `TERRAIN TYPE`) %>%
  separate_rows(`TERRAIN TYPE`, sep = ",") %>%
  mutate(`TERRAIN TYPE` = trimws(`TERRAIN TYPE`))

# Split the Type_climate
climate_types <- planets %>%
  select(planet_code, Type_climate, mass) %>% # added mass for question 9
  separate_rows(Type_climate, sep = ",") %>%
  mutate(Type_climate = trimws(Type_climate))

head(terrain_types)
head(climate_types)
```

### Question 8

```{r}
# Number of climates
climate_count <- climate_types %>%
  group_by(planet_code) %>%
  summarise(number_of_climates = n_distinct(Type_climate))

# Number of terrain types
terrain_count <- terrain_types %>%
  group_by(planet_code) %>%
  summarise(number_of_terrains = n_distinct(`TERRAIN TYPE`))

# Plot climates
ggplot(climate_count, aes(x = number_of_climates)) +
  geom_bar() +
  labs(
    title = "Distribution of Number of Different Climates Per Planet",
    x = "Number of Different Climates",
    y = "Number of Planets"
  )

# Plot terrain
ggplot(terrain_count, aes(x = number_of_terrains)) +
  geom_bar() +
  labs(
    title = "Distribution of Number of Different Terrains Per Planet",
    x = "Number of Different Terrains",
    y = "Number of Planets"
  )
```

### Question 9

```{r}
# Filter the NAs in mass
climate_types <- climate_types %>%
  filter(!is.na(mass))

# Graphical representation of the mass distribution conditioned by climates
ggplot(climate_types, aes(x = Type_climate, y = mass, fill = Type_climate)) +
  geom_boxplot() +
  labs(
    title = "Distribution of Planet Mass Conditioned by Climates",
    x = "Climate Type",
    y = "Mass (relative to Earth)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
